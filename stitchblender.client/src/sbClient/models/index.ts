/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PatternCell}
 */
// @ts-ignore
export function createPatternCellFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPatternCell;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Pattern}
 */
// @ts-ignore
export function createPatternFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPattern;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PatternRow}
 */
// @ts-ignore
export function createPatternRowFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPatternRow;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPattern(pattern: Partial<Pattern> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "builtIn": n => { pattern.builtIn = n.getBooleanValue(); },
        "id": n => { pattern.id = n.getStringValue(); },
        "name": n => { pattern.name = n.getStringValue(); },
        "rows": n => { pattern.rows = n.getCollectionOfObjectValues<PatternRow>(createPatternRowFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPatternCell(patternCell: Partial<PatternCell> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "colour": n => { patternCell.colour = n.getStringValue(); },
        "isForeground": n => { patternCell.isForeground = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPatternRow(patternRow: Partial<PatternRow> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "cells": n => { patternRow.cells = n.getCollectionOfObjectValues<PatternCell>(createPatternCellFromDiscriminatorValue); },
    }
}
export interface Pattern extends Parsable {
    /**
     * The builtIn property
     */
    builtIn?: boolean | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The rows property
     */
    rows?: PatternRow[] | null;
}
export interface PatternCell extends Parsable {
    /**
     * The colour property
     */
    colour?: string | null;
    /**
     * The isForeground property
     */
    isForeground?: boolean | null;
}
export interface PatternRow extends Parsable {
    /**
     * The cells property
     */
    cells?: PatternCell[] | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePattern(writer: SerializationWriter, pattern: Partial<Pattern> | undefined | null = {}) : void {
    if (pattern) {
        writer.writeBooleanValue("builtIn", pattern.builtIn);
        writer.writeStringValue("id", pattern.id);
        writer.writeStringValue("name", pattern.name);
        writer.writeCollectionOfObjectValues<PatternRow>("rows", pattern.rows, serializePatternRow);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePatternCell(writer: SerializationWriter, patternCell: Partial<PatternCell> | undefined | null = {}) : void {
    if (patternCell) {
        writer.writeStringValue("colour", patternCell.colour);
        writer.writeBooleanValue("isForeground", patternCell.isForeground);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePatternRow(writer: SerializationWriter, patternRow: Partial<PatternRow> | undefined | null = {}) : void {
    if (patternRow) {
        writer.writeCollectionOfObjectValues<PatternCell>("cells", patternRow.cells, serializePatternCell);
    }
}
/* tslint:enable */
/* eslint-enable */
